{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { createVNode as _createVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"h-screen overflow-y-auto bg-gray-100 p-4\"\n};\nconst _hoisted_2 = {\n  class: \"flex items-center p-4\"\n};\nconst _hoisted_3 = {\n  class: \"flex flex-col\"\n};\nconst _hoisted_4 = {\n  class: \"h-10\"\n};\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"text-white mr-4\"\n}, \"Objects Counted:\", -1);\nconst _hoisted_6 = {\n  class: \"text-lime-400\"\n};\nconst _hoisted_7 = {\n  class: \"flex\"\n};\nconst _hoisted_8 = {\n  class: \"mx-1 flex-1\"\n};\nconst _hoisted_9 = {\n  class: \"mx-1 flex-1\"\n};\nconst _hoisted_10 = {\n  class: \"mx-1 flex-1\"\n};\nimport HeaderComp from \"@/components/HeaderComp.vue\";\nimport CommonButton from \"@/components/CommonButton.vue\";\nimport { reactive } from \"vue\";\nimport ImageComp from \"@/components/ImageComp.vue\";\nimport axios from \"axios\";\nexport default {\n  __name: 'HogPage',\n  setup(__props) {\n    const model = reactive({\n      imageOriginView: null,\n      imageOrigin: null,\n      hogImage: null,\n      segmentedImage: null,\n      objectsCount: 0\n    });\n    const uploadImage = async event => {\n      const file = event.target.files[0];\n      if (file) {\n        if (file.name.toLowerCase().includes(\"tiff\") || file.name.toLowerCase().includes(\"tif\")) {\n          const formData = new FormData();\n          formData.append('tiff_file', file);\n          try {\n            const response = await axios.post('http://localhost:5000/api/v1.0/convert', formData, {\n              headers: {\n                'Content-Type': 'multipart/form-data'\n              },\n              responseType: 'arraybuffer'\n            });\n            const blob = new Blob([response.data], {\n              type: 'image/png'\n            });\n            model.imageOriginView = URL.createObjectURL(blob);\n          } catch (error) {\n            alert('Error uploading and converting the image, please try again');\n            console.error('Error uploading and converting the image', error);\n          }\n        } else {\n          const reader = new FileReader();\n          reader.onload = e => {\n            model.imageOriginView = e.target.result;\n          };\n          reader.readAsDataURL(file);\n        }\n        model.imageOrigin = file;\n        model.histogram = null;\n        model.segmentedImage = null;\n        model.hogImage = null;\n      }\n    };\n    const applyHog = async () => {\n      const url = 'http://localhost:5000/api/v1.0/hog';\n      if (!model.imageOrigin) {\n        alert(\"You need to choose the image first\");\n        return;\n      }\n      const formData = new FormData();\n      formData.append('image', model.imageOrigin);\n      try {\n        const response = await axios.post(url, formData, {});\n        model.hogImage = 'http://localhost:5000' + response.data.hog_image_url;\n        model.segmentedImage = 'http://localhost:5000' + response.data.segmented_image_url;\n        model.objectsCount = response.data.total_bounding_boxes;\n      } catch (error) {\n        console.error(error);\n        alert(error.response.data.message);\n      }\n    };\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(HeaderComp, {\n        title: 'Histogram of Oriented Gradients Page'\n      }), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"input\", {\n        type: \"file\",\n        onChange: uploadImage,\n        accept: \"image/*\"\n      }, null, 32), _createVNode(CommonButton, {\n        onClick: _cache[0] || (_cache[0] = $event => applyHog()),\n        name: \"Apply HOG\",\n        \"custom-classes\": 'py-4'\n      })]), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_hoisted_5, _createElementVNode(\"span\", _hoisted_6, _toDisplayString(model.objectsCount), 1)]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [model.imageOriginView ? (_openBlock(), _createBlock(ImageComp, {\n        key: 0,\n        title: \"Original Image\",\n        source: model.imageOriginView,\n        alt: \"Uploaded Image\"\n      }, null, 8, [\"source\"])) : _createCommentVNode(\"\", true)]), _createElementVNode(\"div\", _hoisted_9, [model.hogImage ? (_openBlock(), _createBlock(ImageComp, {\n        key: 0,\n        title: \"Hog Image\",\n        source: model.hogImage,\n        alt: \"Uploaded Image\"\n      }, null, 8, [\"source\"])) : _createCommentVNode(\"\", true)]), _createElementVNode(\"div\", _hoisted_10, [model.segmentedImage ? (_openBlock(), _createBlock(ImageComp, {\n        key: 0,\n        title: \"Segmented Image\",\n        source: model.segmentedImage,\n        alt: \"Uploaded Image\"\n      }, null, 8, [\"source\"])) : _createCommentVNode(\"\", true)])])])]);\n    };\n  }\n};","map":{"version":3,"names":["HeaderComp","CommonButton","reactive","ImageComp","axios","model","imageOriginView","imageOrigin","hogImage","segmentedImage","objectsCount","uploadImage","event","file","target","files","name","toLowerCase","includes","formData","FormData","append","response","post","headers","responseType","blob","Blob","data","type","URL","createObjectURL","error","alert","console","reader","FileReader","onload","e","result","readAsDataURL","histogram","applyHog","url","hog_image_url","segmented_image_url","total_bounding_boxes","message"],"sources":["C:/Users/Ninh/Desktop/Doan/DATN-NTT2024/src/views/HogPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"h-screen overflow-y-auto bg-gray-100 p-4\">\r\n    <HeaderComp :title=\"'Histogram of Oriented Gradients Page'\"/>\r\n    <div class=\"flex items-center p-4\">\r\n      <input type=\"file\" @change=\"uploadImage\" accept=\"image/*\"/>\r\n      <CommonButton\r\n          @click=\"applyHog()\"\r\n          name=\"Apply HOG\"\r\n          :custom-classes=\"'py-4'\"\r\n      >\r\n      </CommonButton>\r\n    </div>\r\n    <div class=\"flex flex-col\">\r\n      <div class=\"h-10\">\r\n        <span class=\"text-white mr-4\">Objects Counted:</span>\r\n        <span class=\"text-lime-400\">{{ model.objectsCount }}</span>\r\n      </div>\r\n      <div class=\"flex\">\r\n        <div class=\"mx-1 flex-1\">\r\n          <ImageComp v-if=\"model.imageOriginView\" title=\"Original Image\" :source=\"model.imageOriginView\"\r\n                     alt=\"Uploaded Image\"/>\r\n        </div>\r\n        <div class=\"mx-1 flex-1\">\r\n          <ImageComp v-if=\"model.hogImage\" title=\"Hog Image\" :source=\"model.hogImage\" alt=\"Uploaded Image\"/>\r\n        </div>\r\n        <div class=\"mx-1 flex-1\">\r\n          <ImageComp v-if=\"model.segmentedImage\" title=\"Segmented Image\" :source=\"model.segmentedImage\" alt=\"Uploaded Image\"/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport HeaderComp from \"@/components/HeaderComp.vue\";\r\nimport CommonButton from \"@/components/CommonButton.vue\";\r\nimport {reactive} from \"vue\";\r\nimport ImageComp from \"@/components/ImageComp.vue\";\r\nimport axios from \"axios\";\r\n\r\nconst model = reactive({\r\n  imageOriginView: null,\r\n  imageOrigin: null,\r\n  hogImage: null,\r\n  segmentedImage: null,\r\n  objectsCount: 0\r\n})\r\n\r\nconst uploadImage = async (event) => {\r\n  const file = event.target.files[0];\r\n  if (file) {\r\n    if (file.name.toLowerCase().includes(\"tiff\") || file.name.toLowerCase().includes(\"tif\")) {\r\n      const formData = new FormData()\r\n      formData.append('tiff_file', file)\r\n\r\n      try {\r\n        const response = await axios.post('http://localhost:5000/api/v1.0/convert', formData, {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n          },\r\n          responseType: 'arraybuffer'\r\n        })\r\n\r\n        const blob = new Blob([response.data], {type: 'image/png'})\r\n        model.imageOriginView = URL.createObjectURL(blob)\r\n      } catch (error) {\r\n        alert('Error uploading and converting the image, please try again')\r\n        console.error('Error uploading and converting the image', error)\r\n      }\r\n    } else {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        model.imageOriginView = e.target.result;\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n    model.imageOrigin = file;\r\n    model.histogram = null;\r\n    model.segmentedImage = null;\r\n    model.hogImage = null;\r\n  }\r\n};\r\n\r\nconst applyHog = async () => {\r\n  const url = 'http://localhost:5000/api/v1.0/hog';\r\n\r\n  if (!model.imageOrigin) {\r\n    alert(\"You need to choose the image first\")\r\n    return\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append('image', model.imageOrigin);\r\n\r\n  try {\r\n    const response = await axios.post(url, formData, {});\r\n    model.hogImage = 'http://localhost:5000' + response.data.hog_image_url\r\n    model.segmentedImage = 'http://localhost:5000' + response.data.segmented_image_url\r\n    model.objectsCount = response.data.total_bounding_boxes\r\n  } catch (error) {\r\n    console.error(error);\r\n    alert(error.response.data.message);\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,OAAOA,UAAU,MAAM,6BAA6B;AACpD,OAAOC,YAAY,MAAM,+BAA+B;AACxD,SAAQC,QAAQ,QAAO,KAAK;AAC5B,OAAOC,SAAS,MAAM,4BAA4B;AAClD,OAAOC,KAAK,MAAM,OAAO;;;;IAEzB,MAAMC,KAAK,GAAGH,QAAQ,CAAC;MACrBI,eAAe,EAAE,IAAI;MACrBC,WAAW,EAAE,IAAI;MACjBC,QAAQ,EAAE,IAAI;MACdC,cAAc,EAAE,IAAI;MACpBC,YAAY,EAAE;IAChB,CAAC,CAAC;IAEF,MAAMC,WAAW,GAAG,MAAOC,KAAK,IAAK;MACnC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClC,IAAIF,IAAI,EAAE;QACR,IAAIA,IAAI,CAACG,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC,IAAIL,IAAI,CAACG,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;UACvF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;UAC/BD,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAER,IAAI,CAAC;UAElC,IAAI;YACF,MAAMS,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAC,wCAAwC,EAAEJ,QAAQ,EAAE;cACpFK,OAAO,EAAE;gBACP,cAAc,EAAE;cAClB,CAAC;cACDC,YAAY,EAAE;YAChB,CAAC,CAAC;YAEF,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACL,QAAQ,CAACM,IAAI,CAAC,EAAE;cAACC,IAAI,EAAE;YAAW,CAAC,CAAC;YAC3DxB,KAAK,CAACC,eAAe,GAAGwB,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;UACnD,CAAC,CAAC,OAAOM,KAAK,EAAE;YACdC,KAAK,CAAC,4DAA4D,CAAC;YACnEC,OAAO,CAACF,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;UAClE;QACF,CAAC,MAAM;UACL,MAAMG,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;UAC/BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAK;YACrBjC,KAAK,CAACC,eAAe,GAAGgC,CAAC,CAACxB,MAAM,CAACyB,MAAM;UACzC,CAAC;UACDJ,MAAM,CAACK,aAAa,CAAC3B,IAAI,CAAC;QAC5B;QACAR,KAAK,CAACE,WAAW,GAAGM,IAAI;QACxBR,KAAK,CAACoC,SAAS,GAAG,IAAI;QACtBpC,KAAK,CAACI,cAAc,GAAG,IAAI;QAC3BJ,KAAK,CAACG,QAAQ,GAAG,IAAI;MACvB;IACF,CAAC;IAED,MAAMkC,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,MAAMC,GAAG,GAAG,oCAAoC;MAEhD,IAAI,CAACtC,KAAK,CAACE,WAAW,EAAE;QACtB0B,KAAK,CAAC,oCAAoC,CAAC;QAC3C;MACF;MAEA,MAAMd,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEhB,KAAK,CAACE,WAAW,CAAC;MAE3C,IAAI;QACF,MAAMe,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAACoB,GAAG,EAAExB,QAAQ,EAAE,CAAC,CAAC,CAAC;QACpDd,KAAK,CAACG,QAAQ,GAAG,uBAAuB,GAAGc,QAAQ,CAACM,IAAI,CAACgB,aAAa;QACtEvC,KAAK,CAACI,cAAc,GAAG,uBAAuB,GAAGa,QAAQ,CAACM,IAAI,CAACiB,mBAAmB;QAClFxC,KAAK,CAACK,YAAY,GAAGY,QAAQ,CAACM,IAAI,CAACkB,oBAAoB;MACzD,CAAC,CAAC,OAAOd,KAAK,EAAE;QACdE,OAAO,CAACF,KAAK,CAACA,KAAK,CAAC;QACpBC,KAAK,CAACD,KAAK,CAACV,QAAQ,CAACM,IAAI,CAACmB,OAAO,CAAC;MACpC;IACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}