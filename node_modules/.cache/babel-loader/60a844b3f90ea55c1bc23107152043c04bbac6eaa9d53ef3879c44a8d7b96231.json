{"ast":null,"code":"import panzoom from 'panzoom';\nexport default {\n  name: \"ImageComp\",\n  data() {\n    return {\n      scale: 1,\n      // Initial scale factor\n      imageWidth: 500,\n      // Default image width\n      imageHeight: 500,\n      // Default image height\n      minWidth: 400,\n      maxWidth: 500\n    };\n  },\n  mounted() {\n    // Initialize Panzoom when the component is mounted\n    this.initPanzoom();\n    this.calculateCanvasSize();\n  },\n  props: {\n    title: {\n      type: String,\n      default: ''\n    },\n    alt: {\n      type: String,\n      default: ''\n    },\n    source: {}\n  },\n  computed: {\n    imageStyle() {\n      return {\n        transform: `scale(${this.scale})`\n      };\n    }\n  },\n  methods: {\n    calculateCanvasSize() {\n      const image = new Image();\n      image.src = this.source;\n\n      // Calculate the canvas dimensions based on the image's aspect ratio\n      image.onload = () => {\n        const aspectRatio = image.width / image.height;\n\n        // Set canvas width within the specified range\n        this.imageWidth = Math.min(Math.max(image.width, this.minWidth), this.maxWidth);\n\n        // Calculate and set image height to maintain the image's aspect ratio\n        this.imageHeight = Math.round(this.imageWidth / aspectRatio);\n      };\n    },\n    initPanzoom() {\n      // Get the panzoom container and target elements using refs\n      const container = this.$refs.panzoomElement;\n      const target = this.$refs.panzoomTarget;\n\n      // Initialize Panzoom\n      const pz = panzoom(target, {\n        // You can customize options here\n        maxZoom: 10,\n        minZoom: 1\n      });\n\n      // Optional: Add event listeners for additional functionality\n      container.addEventListener('wheel', pz.zoomWithWheel);\n    }\n  }\n};","map":{"version":3,"names":["panzoom","name","data","scale","imageWidth","imageHeight","minWidth","maxWidth","mounted","initPanzoom","calculateCanvasSize","props","title","type","String","default","alt","source","computed","imageStyle","transform","methods","image","Image","src","onload","aspectRatio","width","height","Math","min","max","round","container","$refs","panzoomElement","target","panzoomTarget","pz","maxZoom","minZoom","addEventListener","zoomWithWheel"],"sources":["C:\\Users\\Ninh\\Desktop\\Doan\\DATN-NTT2024\\src\\components\\ImageComp.vue"],"sourcesContent":["<template>\r\n  <div class=\"image-box\">\r\n    <div class=\"image-title text-white text-lg\">\r\n      <span>{{ title }}</span>\r\n    </div>\r\n    <div class=\"image\">\r\n      <div ref=\"panzoomElement\">\r\n        <img :style=\"imageStyle\" :width=\"imageWidth\" :height=\"imageHeight\" :src=\"source\" :alt=\"alt\" ref=\"panzoomTarget\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport panzoom from 'panzoom';\r\n\r\nexport default {\r\n  name: \"ImageComp\",\r\n  data() {\r\n    return {\r\n      scale: 1, // Initial scale factor\r\n      imageWidth: 500, // Default image width\r\n      imageHeight: 500, // Default image height\r\n      minWidth: 400,\r\n      maxWidth: 500,\r\n    };\r\n  },\r\n  mounted() {\r\n    // Initialize Panzoom when the component is mounted\r\n    this.initPanzoom();\r\n    this.calculateCanvasSize();\r\n  },\r\n  props: {\r\n    title: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n    alt: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n    source: {}\r\n  },\r\n  computed: {\r\n    imageStyle() {\r\n      return {\r\n        transform: `scale(${this.scale})`,\r\n      };\r\n    },\r\n  },\r\n  methods: {\r\n    calculateCanvasSize() {\r\n      const image = new Image();\r\n      image.src = this.source;\r\n\r\n      // Calculate the canvas dimensions based on the image's aspect ratio\r\n      image.onload = () => {\r\n        const aspectRatio = image.width / image.height;\r\n\r\n        // Set canvas width within the specified range\r\n        this.imageWidth = Math.min(Math.max(image.width, this.minWidth), this.maxWidth);\r\n\r\n        // Calculate and set image height to maintain the image's aspect ratio\r\n        this.imageHeight = Math.round(this.imageWidth / aspectRatio);\r\n      };\r\n    },\r\n    initPanzoom() {\r\n      // Get the panzoom container and target elements using refs\r\n      const container = this.$refs.panzoomElement;\r\n      const target = this.$refs.panzoomTarget;\r\n\r\n      // Initialize Panzoom\r\n      const pz = panzoom(target, {\r\n        // You can customize options here\r\n        maxZoom: 10,\r\n        minZoom: 1,\r\n      });\r\n\r\n      // Optional: Add event listeners for additional functionality\r\n      container.addEventListener('wheel', pz.zoomWithWheel);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.image-box {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  row-gap: 20px;\r\n  margin-bottom: 100px;\r\n}\r\n\r\n.image {\r\n  border: 1px solid lightgreen;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n}\r\n\r\n.image img {\r\n  transition: transform 0.3s ease;\r\n}\r\n</style>\r\n  \r\n\r\n"],"mappings":"AAcA,OAAOA,OAAM,MAAO,SAAS;AAE7B,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,CAAC;MAAE;MACVC,UAAU,EAAE,GAAG;MAAE;MACjBC,WAAW,EAAE,GAAG;MAAE;MAClBC,QAAQ,EAAE,GAAG;MACbC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACC,WAAW,CAAC,CAAC;IAClB,IAAI,CAACC,mBAAmB,CAAC,CAAC;EAC5B,CAAC;EACDC,KAAK,EAAE;IACLC,KAAK,EAAE;MACLC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE;IACX,CAAC;IACDC,GAAG,EAAE;MACHH,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE;IACX,CAAC;IACDE,MAAM,EAAE,CAAC;EACX,CAAC;EACDC,QAAQ,EAAE;IACRC,UAAUA,CAAA,EAAG;MACX,OAAO;QACLC,SAAS,EAAE,SAAS,IAAI,CAACjB,KAAK;MAChC,CAAC;IACH;EACF,CAAC;EACDkB,OAAO,EAAE;IACPX,mBAAmBA,CAAA,EAAG;MACpB,MAAMY,KAAI,GAAI,IAAIC,KAAK,CAAC,CAAC;MACzBD,KAAK,CAACE,GAAE,GAAI,IAAI,CAACP,MAAM;;MAEvB;MACAK,KAAK,CAACG,MAAK,GAAI,MAAM;QACnB,MAAMC,WAAU,GAAIJ,KAAK,CAACK,KAAI,GAAIL,KAAK,CAACM,MAAM;;QAE9C;QACA,IAAI,CAACxB,UAAS,GAAIyB,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACT,KAAK,CAACK,KAAK,EAAE,IAAI,CAACrB,QAAQ,CAAC,EAAE,IAAI,CAACC,QAAQ,CAAC;;QAE/E;QACA,IAAI,CAACF,WAAU,GAAIwB,IAAI,CAACG,KAAK,CAAC,IAAI,CAAC5B,UAAS,GAAIsB,WAAW,CAAC;MAC9D,CAAC;IACH,CAAC;IACDjB,WAAWA,CAAA,EAAG;MACZ;MACA,MAAMwB,SAAQ,GAAI,IAAI,CAACC,KAAK,CAACC,cAAc;MAC3C,MAAMC,MAAK,GAAI,IAAI,CAACF,KAAK,CAACG,aAAa;;MAEvC;MACA,MAAMC,EAAC,GAAItC,OAAO,CAACoC,MAAM,EAAE;QACzB;QACAG,OAAO,EAAE,EAAE;QACXC,OAAO,EAAE;MACX,CAAC,CAAC;;MAEF;MACAP,SAAS,CAACQ,gBAAgB,CAAC,OAAO,EAAEH,EAAE,CAACI,aAAa,CAAC;IACvD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}