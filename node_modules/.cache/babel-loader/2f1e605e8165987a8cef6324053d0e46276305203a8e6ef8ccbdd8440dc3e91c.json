{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelCheckbox as _vModelCheckbox, createTextVNode as _createTextVNode, vModelText as _vModelText, vModelRadio as _vModelRadio, createBlock as _createBlock, normalizeClass as _normalizeClass, withCtx as _withCtx, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-11803265\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"flex flex-col\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"caution\"\n};\nconst _hoisted_3 = {\n  class: \"flex\"\n};\nconst _hoisted_4 = {\n  class: \"py-3 flex pr-10\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  class: \"text-white basis-48 pr-3\",\n  for: \"modelOption\"\n}, \"Type Of Model:\", -1));\nconst _hoisted_6 = {\n  class: \"py-3 flex\"\n};\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  class: \"text-white basis-48 pr-3\",\n  for: \"colorMapOption\"\n}, \"Color Map:\", -1));\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"plasma\"\n}, \"Plasma\", -1));\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"jet\"\n}, \"Jet\", -1));\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"viridis\"\n}, \"Viridis\", -1));\nconst _hoisted_11 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"random_label_cmap\"\n}, \"Random Label\", -1));\nconst _hoisted_12 = [_hoisted_8, _hoisted_9, _hoisted_10, _hoisted_11];\nconst _hoisted_13 = {\n  class: \"py-3 flex\",\n  style: {\n    \"padding-left\": \"30px\"\n  }\n};\nconst _hoisted_14 = {\n  key: 1,\n  class: \"popup\"\n};\nconst _hoisted_15 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"popup-header\"\n}, \"Object Detection with Star-convex Shapes\", -1));\nconst _hoisted_16 = {\n  class: \"section\"\n};\nconst _hoisted_17 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Neural Network Prediction\", -1));\nconst _hoisted_18 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"model\"\n}, \"Model\", -1));\nconst _hoisted_19 = {\n  class: \"normalize\"\n};\nconst _hoisted_20 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"percentile-low\"\n}, \"Percentile low\", -1));\nconst _hoisted_21 = {\n  class: \"range-value\"\n};\nconst _hoisted_22 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"percentile-high\"\n}, \"Percentile high\", -1));\nconst _hoisted_23 = {\n  class: \"range-value\"\n};\nconst _hoisted_24 = {\n  class: \"section\"\n};\nconst _hoisted_25 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"NMS Postprocessing\", -1));\nconst _hoisted_26 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"probability-threshold\"\n}, \"Probability/Score Threshold\", -1));\nconst _hoisted_27 = {\n  class: \"range-value\"\n};\nconst _hoisted_28 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"overlap-threshold\"\n}, \"Overlap Threshold\", -1));\nconst _hoisted_29 = {\n  class: \"range-value\"\n};\nconst _hoisted_30 = {\n  class: \"output-type\"\n};\nconst _hoisted_31 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Output Type\", -1));\nconst _hoisted_32 = {\n  class: \"popup-buttons\"\n};\nconst _hoisted_33 = [\"disabled\"];\nconst _hoisted_34 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"upload__message\"\n}, [/*#__PURE__*/_createElementVNode(\"span\", null, \"Click to upload file\")], -1));\nconst _hoisted_35 = {\n  class: \"flex mt-16\"\n};\nconst _hoisted_36 = {\n  class: \"flex flex-col justify-center mx-5\"\n};\nconst _hoisted_37 = {\n  class: \"flex h-8\"\n};\nconst _hoisted_38 = {\n  key: 0,\n  class: \"mr-16 text-lime-400\"\n};\nconst _hoisted_39 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"text-white mr-4\"\n}, \"Duration:\", -1));\nconst _hoisted_40 = {\n  key: 1,\n  class: \"mr-16 text-lime-400\"\n};\nconst _hoisted_41 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"text-white mr-4\"\n}, \"Objects Counted: \", -1));\nconst _hoisted_42 = {\n  class: \"w-full flex justify-end\"\n};\nimport { ref, reactive, onMounted } from 'vue';\nimport axios from 'axios';\nimport HeaderComp from '@/components/HeaderComp.vue';\nimport SpinnerLoading from '@/components/SpinnerLoading.vue';\nimport ImageComp from '@/components/ImageComp.vue';\nimport ImageRes from '@/components/ImageRes.vue';\nimport CommonButton from \"@/components/CommonButton.vue\";\nconst __default__ = {\n  data() {\n    return {\n      isPopupVisible: false,\n      normalizeImage: true,\n      percentileLow: 0,\n      percentileHigh: 99.8,\n      probabilityThreshold: 0.5,\n      overlapThreshold: 0.4,\n      outputType: 'both',\n      // Default value\n      model: 'versatile' // Default model\n    };\n  },\n  methods: {\n    togglePopup() {\n      this.isPopupVisible = !this.isPopupVisible;\n    },\n    applySettings() {\n      // Apply settings logic here\n      this.togglePopup();\n    }\n  }\n};\nexport default /*#__PURE__*/Object.assign(__default__, {\n  __name: 'PredictPage',\n  setup(__props) {\n    const showSpinner = ref(false);\n    const notAllowed = ref(false);\n    const fileUpload = ref(null);\n    const models = ref();\n    const fileInput = ref(null);\n    const isSegment = ref(false);\n    const model = reactive({\n      type: \"\",\n      colorMap: \"plasma\",\n      image: null,\n      imageRes: null,\n      duration: 0,\n      objectsCount: 0,\n      points: [],\n      coord: [],\n      strokeLine: '#000000'\n    });\n    onMounted(() => {\n      getModeList();\n    });\n    const openFileSelector = () => {\n      fileInput.value.click();\n    };\n    const uploadImage = async event => {\n      showSpinner.value = true;\n      notAllowed.value = true;\n      const file = event.target.files[0];\n      if (file) {\n        fileUpload.value = file;\n        if (file.name.toLowerCase().includes(\"tiff\") || file.name.toLowerCase().includes(\"tif\")) {\n          const formData = new FormData();\n          formData.append('tiff_file', file);\n          try {\n            const response = await axios.post('http://localhost:5000/api/v1.0/convert', formData, {\n              headers: {\n                'Content-Type': 'multipart/form-data'\n              },\n              responseType: 'arraybuffer'\n            });\n            const blob = new Blob([response.data], {\n              type: 'image/png'\n            });\n            model.image = URL.createObjectURL(blob);\n          } catch (error) {\n            alert('Error uploading and converting the image, please try again');\n            console.error('Error uploading and converting the image', error);\n          }\n        } else {\n          const reader = new FileReader();\n          reader.readAsDataURL(file);\n          reader.onload = () => {\n            model.image = reader.result;\n          };\n        }\n      }\n      showSpinner.value = false;\n      notAllowed.value = false;\n    };\n    const handleSegmentation = async () => {\n      if (fileUpload.value != null && !notAllowed.value) {\n        const formData = new FormData();\n        formData.append('image', fileUpload.value);\n        formData.append('modelName', model.type);\n        formData.append('colorMap', model.colorMap);\n        if (model.colorMap === 'random_label_cmap') {\n          model.strokeLine = '#FF0000';\n        } else {\n          model.strokeLine = '#000000';\n        }\n        showSpinner.value = true;\n        notAllowed.value = true;\n        try {\n          const startTime = performance.now();\n          const response = await axios.post('http://localhost:5000/api/v1.0/segmentation', formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          });\n          model.imageRes = 'data:image/png;base64,' + response.data.imageBytes;\n          model.objectsCount = response.data.objectsCount;\n          model.points = response.data.points;\n          model.coord = response.data.coord;\n          model.duration = (performance.now() - startTime).toFixed(2);\n          isSegment.value = true;\n        } catch (error) {\n          alert('An error occur when segmenting the image, please try again!');\n          console.error('Error uploading and converting the image', error);\n        } finally {\n          showSpinner.value = false;\n          notAllowed.value = false;\n        }\n      }\n    };\n    const downloadImage = () => {\n      const link = document.createElement('a');\n      link.href = model.imageRes;\n      link.download = 'mask.png';\n      link.click();\n    };\n    const resetImage = () => {\n      model.image = null;\n      model.imageRes = null;\n    };\n    const getModeList = async () => {\n      models.value = []; // Clear models before fetching\n      const url = 'http://localhost:5000/api/v1.0/models';\n      try {\n        const response = await axios.get(url, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        // Kiểm tra nếu response.data tồn tại và không rỗng\n        if (response.data && Array.isArray(response.data)) {\n          const modelList = response.data;\n          for (let i = 0; i < modelList.length; i++) {\n            models.value.push({\n              model_name: modelList[i],\n              creation_time: '2024-06-17 15:03:15'\n            });\n          }\n\n          // set default model selected\n          if (models.value && models.value.length > 0) {\n            model.type = models.value[0].model_name;\n          }\n        } else {\n          console.error('Invalid response data structure');\n        }\n      } catch (error) {\n        console.error('Error fetching model list:', error);\n        alert('Error fetching model list. Please try again.');\n      }\n    };\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(HeaderComp, {\n        title: 'Predict Page'\n      }), _createElementVNode(\"div\", _hoisted_1, [!model.image ? (_openBlock(), _createElementBlock(\"span\", _hoisted_2, \"Please upload image with jpg, png or tif format and less than 10mb\")) : _createCommentVNode(\"\", true), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_hoisted_5, _withDirectives(_createElementVNode(\"select\", {\n        id: \"modelOption\",\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => model.type = $event)\n      }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(models.value, item => {\n        return _openBlock(), _createElementBlock(\"option\", {\n          key: item.name\n        }, _toDisplayString(item.model_name), 1);\n      }), 128))], 512), [[_vModelSelect, model.type]])]), _createElementVNode(\"div\", _hoisted_6, [_hoisted_7, _withDirectives(_createElementVNode(\"select\", {\n        id: \"colorMapOption\",\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => model.colorMap = $event)\n      }, _hoisted_12, 512), [[_vModelSelect, model.colorMap]])]), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"button\", {\n        class: \"btn-open\",\n        onClick: _cache[2] || (_cache[2] = (...args) => _ctx.togglePopup && _ctx.togglePopup(...args))\n      }, \"Open StarDist Settings\"), _ctx.isPopupVisible ? (_openBlock(), _createElementBlock(\"div\", {\n        key: 0,\n        class: \"overlay\",\n        onClick: _cache[3] || (_cache[3] = (...args) => _ctx.togglePopup && _ctx.togglePopup(...args))\n      })) : _createCommentVNode(\"\", true), _ctx.isPopupVisible ? (_openBlock(), _createElementBlock(\"div\", _hoisted_14, [_hoisted_15, _createElementVNode(\"div\", _hoisted_16, [_hoisted_17, _hoisted_18, _withDirectives(_createElementVNode(\"select\", {\n        id: \"modelOption\",\n        \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => model.type = $event)\n      }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(models.value, item => {\n        return _openBlock(), _createElementBlock(\"option\", {\n          key: item.name\n        }, _toDisplayString(item.model_name), 1);\n      }), 128))], 512), [[_vModelSelect, model.type]]), _createElementVNode(\"div\", _hoisted_19, [_createElementVNode(\"label\", null, [_withDirectives(_createElementVNode(\"input\", {\n        type: \"checkbox\",\n        \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => _ctx.normalizeImage = $event)\n      }, null, 512), [[_vModelCheckbox, _ctx.normalizeImage]]), _createTextVNode(\" Normalize Image \")]), _hoisted_20, _withDirectives(_createElementVNode(\"input\", {\n        type: \"range\",\n        \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => _ctx.percentileLow = $event),\n        min: \"0\",\n        max: \"100\",\n        step: \"1\"\n      }, null, 512), [[_vModelText, _ctx.percentileLow]]), _createElementVNode(\"div\", _hoisted_21, _toDisplayString(_ctx.percentileLow) + \"%\", 1), _hoisted_22, _withDirectives(_createElementVNode(\"input\", {\n        type: \"range\",\n        \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => _ctx.percentileHigh = $event),\n        min: \"0\",\n        max: \"100\",\n        step: \"0.1\"\n      }, null, 512), [[_vModelText, _ctx.percentileHigh]]), _createElementVNode(\"div\", _hoisted_23, _toDisplayString(_ctx.percentileHigh) + \"%\", 1)])]), _createElementVNode(\"div\", _hoisted_24, [_hoisted_25, _hoisted_26, _withDirectives(_createElementVNode(\"input\", {\n        type: \"range\",\n        \"onUpdate:modelValue\": _cache[8] || (_cache[8] = $event => _ctx.probabilityThreshold = $event),\n        min: \"0\",\n        max: \"1\",\n        step: \"0.01\"\n      }, null, 512), [[_vModelText, _ctx.probabilityThreshold]]), _createElementVNode(\"div\", _hoisted_27, _toDisplayString(_ctx.probabilityThreshold), 1), _hoisted_28, _withDirectives(_createElementVNode(\"input\", {\n        type: \"range\",\n        \"onUpdate:modelValue\": _cache[9] || (_cache[9] = $event => _ctx.overlapThreshold = $event),\n        min: \"0\",\n        max: \"1\",\n        step: \"0.01\"\n      }, null, 512), [[_vModelText, _ctx.overlapThreshold]]), _createElementVNode(\"div\", _hoisted_29, _toDisplayString(_ctx.overlapThreshold), 1)]), _createElementVNode(\"div\", _hoisted_30, [_hoisted_31, _createElementVNode(\"label\", null, [_withDirectives(_createElementVNode(\"input\", {\n        type: \"radio\",\n        \"onUpdate:modelValue\": _cache[10] || (_cache[10] = $event => _ctx.outputType = $event),\n        value: \"roi-manager\"\n      }, null, 512), [[_vModelRadio, _ctx.outputType]]), _createTextVNode(\" ROI Manager\")]), _createElementVNode(\"label\", null, [_withDirectives(_createElementVNode(\"input\", {\n        type: \"radio\",\n        \"onUpdate:modelValue\": _cache[11] || (_cache[11] = $event => _ctx.outputType = $event),\n        value: \"label-image\"\n      }, null, 512), [[_vModelRadio, _ctx.outputType]]), _createTextVNode(\" Label Image\")]), _createElementVNode(\"label\", null, [_withDirectives(_createElementVNode(\"input\", {\n        type: \"radio\",\n        \"onUpdate:modelValue\": _cache[12] || (_cache[12] = $event => _ctx.outputType = $event),\n        value: \"both\",\n        checked: \"\"\n      }, null, 512), [[_vModelRadio, _ctx.outputType]]), _createTextVNode(\" Both\")])]), _createElementVNode(\"div\", _hoisted_32, [_createElementVNode(\"button\", {\n        class: \"btn-close\",\n        onClick: _cache[13] || (_cache[13] = (...args) => _ctx.togglePopup && _ctx.togglePopup(...args))\n      }, \"Cancel\"), _createElementVNode(\"button\", {\n        class: \"btn-apply\",\n        onClick: _cache[14] || (_cache[14] = (...args) => _ctx.applySettings && _ctx.applySettings(...args))\n      }, \"Apply\")])])) : _createCommentVNode(\"\", true)])]), !model.image ? (_openBlock(), _createElementBlock(\"div\", {\n        key: 1,\n        class: _normalizeClass([\"upload-box\", notAllowed.value && 'not-allowed']),\n        onClick: openFileSelector\n      }, [showSpinner.value ? (_openBlock(), _createBlock(SpinnerLoading, {\n        key: 0\n      })) : _createCommentVNode(\"\", true), _createElementVNode(\"input\", {\n        ref_key: \"fileInput\",\n        ref: fileInput,\n        type: \"file\",\n        onChange: uploadImage,\n        accept: \"image/*\",\n        style: {\n          \"display\": \"none\"\n        },\n        disabled: notAllowed.value\n      }, null, 40, _hoisted_33), _hoisted_34], 2)) : _createCommentVNode(\"\", true), _createElementVNode(\"div\", _hoisted_35, [model.image ? (_openBlock(), _createBlock(ImageComp, {\n        key: 0,\n        title: \"Original Image\",\n        source: model.image,\n        alt: \"Uploaded Image\"\n      }, null, 8, [\"source\"])) : _createCommentVNode(\"\", true), _createElementVNode(\"div\", _hoisted_36, [model.image ? (_openBlock(), _createBlock(CommonButton, {\n        key: 0,\n        onClick: handleSegmentation,\n        name: \"Segment >>\",\n        \"is-loading\": showSpinner.value\n      }, {\n        default: _withCtx(() => [showSpinner.value ? (_openBlock(), _createBlock(SpinnerLoading, {\n          key: 0,\n          size: \"small\",\n          colorProp: \"grey\"\n        })) : _createCommentVNode(\"\", true)]),\n        _: 1\n      }, 8, [\"is-loading\"])) : _createCommentVNode(\"\", true)]), model.imageRes ? (_openBlock(), _createBlock(ImageRes, {\n        key: 1,\n        title: \"Predicted Image\",\n        source: model.imageRes,\n        alt: \"Predicted Image\",\n        points: model.points,\n        coordArray: model.coord,\n        strokeLine: model.strokeLine\n      }, null, 8, [\"source\", \"points\", \"coordArray\", \"strokeLine\"])) : _createCommentVNode(\"\", true)]), _createElementVNode(\"div\", _hoisted_37, [model.image ? (_openBlock(), _createElementBlock(\"div\", _hoisted_38, [_hoisted_39, _createElementVNode(\"span\", null, _toDisplayString(model.duration) + \" ms\", 1)])) : _createCommentVNode(\"\", true), model.image ? (_openBlock(), _createElementBlock(\"div\", _hoisted_40, [_hoisted_41, _createElementVNode(\"span\", null, _toDisplayString(model.objectsCount), 1)])) : _createCommentVNode(\"\", true), model.image ? (_openBlock(), _createBlock(CommonButton, {\n        key: 2,\n        onClick: downloadImage,\n        name: \"Download\",\n        disabled: !isSegment.value,\n        \"custom-classes\": 'mr-16'\n      }, null, 8, [\"disabled\"])) : _createCommentVNode(\"\", true)]), _createElementVNode(\"div\", _hoisted_42, [model.image ? (_openBlock(), _createBlock(CommonButton, {\n        key: 0,\n        onClick: resetImage,\n        name: \"Try New Image\",\n        disabled: !isSegment.value,\n        \"custom-classes\": 'mr-16'\n      }, null, 8, [\"disabled\"])) : _createCommentVNode(\"\", true)])])], 64);\n    };\n  }\n});","map":{"version":3,"names":["ref","reactive","onMounted","axios","HeaderComp","SpinnerLoading","ImageComp","ImageRes","CommonButton","__default__","data","isPopupVisible","normalizeImage","percentileLow","percentileHigh","probabilityThreshold","overlapThreshold","outputType","model","methods","togglePopup","applySettings","showSpinner","notAllowed","fileUpload","models","fileInput","isSegment","type","colorMap","image","imageRes","duration","objectsCount","points","coord","strokeLine","getModeList","openFileSelector","value","click","uploadImage","event","file","target","files","name","toLowerCase","includes","formData","FormData","append","response","post","headers","responseType","blob","Blob","URL","createObjectURL","error","alert","console","reader","FileReader","readAsDataURL","onload","result","handleSegmentation","startTime","performance","now","imageBytes","toFixed","downloadImage","link","document","createElement","href","download","resetImage","url","get","Array","isArray","modelList","i","length","push","model_name","creation_time"],"sources":["C:/Users/Ninh/Desktop/Doan/DATN-NTT2024/src/views/PredictPage.vue"],"sourcesContent":["<template>\r\n  <HeaderComp :title=\"'Predict Page'\"/>\r\n  <div class=\"flex flex-col\">\r\n    <span v-if=\"!model.image\" class=\"caution\">Please upload image with jpg, png or tif format and less than 10mb</span>\r\n    <div class=\"flex\">\r\n      <div class=\"py-3 flex pr-10\">\r\n        <label class=\"text-white basis-48 pr-3\" for=\"modelOption\">Type Of Model:</label>\r\n        <select id=\"modelOption\" v-model=\"model.type\">\r\n          <!-- <option value=\"stardist\">HOG</option>\r\n          <option value=\"watershed\">WATERSHED</option>           -->\r\n          <option v-for=\"item of models\" :key=\"item.name\">\r\n            {{ item.model_name }}\r\n          </option>\r\n        </select>\r\n      </div>\r\n      <div class=\"py-3 flex\">\r\n        <label class=\"text-white basis-48 pr-3\" for=\"colorMapOption\">Color Map:</label>\r\n        <select id=\"colorMapOption\" v-model=\"model.colorMap\">\r\n          <option value=\"plasma\">Plasma</option>\r\n          <option value=\"jet\">Jet</option>\r\n          <option value=\"viridis\">Viridis</option>\r\n          <option value=\"random_label_cmap\">Random Label</option>\r\n        </select>\r\n      </div>\r\n      \r\n      <!-- chèn file code stardis UI vào đây -->\r\n       <div class=\"py-3 flex\" style=\"padding-left:30px\">\r\n    <button class=\"btn-open\" @click=\"togglePopup\">Open StarDist Settings</button>\r\n\r\n    <!-- Overlay for the popup -->\r\n    <div v-if=\"isPopupVisible\" class=\"overlay\" @click=\"togglePopup\"></div>\r\n\r\n    <!-- Popup content -->\r\n    <div v-if=\"isPopupVisible\" class=\"popup\">\r\n      <div class=\"popup-header\">Object Detection with Star-convex Shapes</div>\r\n      \r\n\r\n      <!-- Neural Network Prediction Section -->\r\n      <div class=\"section\">\r\n        <h2>Neural Network Prediction</h2>\r\n        <label for=\"model\">Model</label>\r\n        <select id=\"modelOption\" v-model=\"model.type\">\r\n          <!-- <option value=\"stardist\">HOG</option>\r\n          <option value=\"watershed\">WATERSHED</option>           -->\r\n          <option v-for=\"item of models\" :key=\"item.name\">\r\n            {{ item.model_name }}\r\n          </option>\r\n        </select>\r\n\r\n        <div class=\"normalize\">\r\n          <label>\r\n            <input type=\"checkbox\" v-model=\"normalizeImage\"> Normalize Image\r\n          </label>\r\n          <label for=\"percentile-low\">Percentile low</label>\r\n          <input type=\"range\" v-model=\"percentileLow\" min=\"0\" max=\"100\" step=\"1\" />\r\n          <div class=\"range-value\">{{ percentileLow }}%</div>\r\n          \r\n          <label for=\"percentile-high\">Percentile high</label>\r\n          <input type=\"range\" v-model=\"percentileHigh\" min=\"0\" max=\"100\" step=\"0.1\" />\r\n          <div class=\"range-value\">{{ percentileHigh }}%</div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- NMS Postprocessing Section -->\r\n      <div class=\"section\">\r\n        <h2>NMS Postprocessing</h2>\r\n        <label for=\"probability-threshold\">Probability/Score Threshold</label>\r\n        <input type=\"range\" v-model=\"probabilityThreshold\" min=\"0\" max=\"1\" step=\"0.01\" />\r\n        <div class=\"range-value\">{{ probabilityThreshold }}</div>\r\n\r\n        <label for=\"overlap-threshold\">Overlap Threshold</label>\r\n        <input type=\"range\" v-model=\"overlapThreshold\" min=\"0\" max=\"1\" step=\"0.01\" />\r\n        <div class=\"range-value\">{{ overlapThreshold }}</div>\r\n      </div>\r\n\r\n      <!-- Output Type Section -->\r\n      <div class=\"output-type\">\r\n        <h2>Output Type</h2>\r\n        <label><input type=\"radio\" v-model=\"outputType\" value=\"roi-manager\"> ROI Manager</label>\r\n        <label><input type=\"radio\" v-model=\"outputType\" value=\"label-image\"> Label Image</label>\r\n        <label><input type=\"radio\" v-model=\"outputType\" value=\"both\" checked> Both</label>\r\n      </div>\r\n\r\n      <!-- Popup buttons -->\r\n      <div class=\"popup-buttons\">\r\n        <button class=\"btn-close\" @click=\"togglePopup\">Cancel</button>\r\n        <button class=\"btn-apply\" @click=\"applySettings\">Apply</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n    </div>\r\n    <div v-if=\"!model.image\" class=\"upload-box\" @click=\"openFileSelector\" :class=\"notAllowed && 'not-allowed'\">\r\n      <SpinnerLoading v-if=\"showSpinner\"/>\r\n      <input ref=\"fileInput\" type=\"file\" @change=\"uploadImage\" accept=\"image/*\" style=\"display: none;\"\r\n             :disabled=\"notAllowed\">\r\n      <div class=\"upload__message\">\r\n        <span>Click to upload file</span>\r\n      </div>\r\n    </div>\r\n    <div class=\"flex mt-16\">\r\n      <ImageComp v-if=\"model.image\" title=\"Original Image\" :source=\"model.image\" alt=\"Uploaded Image\"/>\r\n      <div class=\"flex flex-col justify-center mx-5\">\r\n        <CommonButton\r\n            @click=\"handleSegmentation\"\r\n            name=\"Segment >>\"\r\n            :is-loading=\"showSpinner\"\r\n            v-if=\"model.image\"\r\n        >\r\n          <SpinnerLoading v-if=\"showSpinner\" size=\"small\" colorProp=\"grey\"/>\r\n        </CommonButton>\r\n      </div>\r\n      <ImageRes\r\n          v-if=\"model.imageRes\"\r\n          title=\"Predicted Image\"\r\n          :source=\"model.imageRes\"\r\n          alt=\"Predicted Image\"\r\n          :points=\"model.points\"\r\n          :coordArray=\"model.coord\"\r\n          :strokeLine=\"model.strokeLine\"\r\n      />\r\n    </div>\r\n    <div class=\"flex h-8\">\r\n      <div class=\"mr-16 text-lime-400\" v-if=\"model.image\">\r\n        <span class=\"text-white mr-4\">Duration:</span>\r\n        <span>{{ model.duration }} ms</span>\r\n      </div>\r\n      <div class=\"mr-16 text-lime-400\" v-if=\"model.image\">\r\n        <span class=\"text-white mr-4\">Objects Counted: </span>\r\n        <span>{{ model.objectsCount }}</span>\r\n      </div>\r\n      <CommonButton\r\n          @click=\"downloadImage\"\r\n          v-if=\"model.image\"\r\n          name=\"Download\"\r\n          :disabled=\"!isSegment\"\r\n          :custom-classes=\"'mr-16'\"\r\n      >\r\n      </CommonButton>\r\n    </div>\r\n    <div class=\"w-full flex justify-end\">\r\n      <CommonButton\r\n          @click=\"resetImage\"\r\n          name=\"Try New Image\"\r\n          v-if=\"model.image\"\r\n          :disabled=\"!isSegment\"\r\n          :custom-classes=\"'mr-16'\"\r\n      >\r\n      </CommonButton>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      isPopupVisible: false,\r\n      normalizeImage: true,\r\n      percentileLow: 0,\r\n      percentileHigh: 99.8,\r\n      probabilityThreshold: 0.5,\r\n      overlapThreshold: 0.4,\r\n      outputType: 'both', // Default value\r\n      model: 'versatile', // Default model\r\n    };\r\n  },\r\n  methods: {\r\n    togglePopup() {\r\n      this.isPopupVisible = !this.isPopupVisible;\r\n    },\r\n    applySettings() {\r\n      // Apply settings logic here\r\n      this.togglePopup();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n\r\n<script setup>\r\nimport {ref, reactive, onMounted} from 'vue'\r\nimport axios from 'axios'\r\nimport HeaderComp from '@/components/HeaderComp.vue'\r\nimport SpinnerLoading from '@/components/SpinnerLoading.vue'\r\nimport ImageComp from '@/components/ImageComp.vue'\r\nimport ImageRes from '@/components/ImageRes.vue'\r\nimport CommonButton from \"@/components/CommonButton.vue\";\r\n\r\nconst showSpinner = ref(false)\r\nconst notAllowed = ref(false)\r\nconst fileUpload = ref(null)\r\nconst models = ref();\r\nconst fileInput = ref(null)\r\nconst isSegment = ref(false)\r\n\r\nconst model = reactive({\r\n  type: \"\",\r\n  colorMap: \"plasma\",\r\n  image: null,\r\n  imageRes: null,\r\n  duration: 0,\r\n  objectsCount: 0,\r\n  points: [],\r\n  coord: [],\r\n  strokeLine: '#000000',\r\n})\r\n\r\nonMounted(() => {\r\n  getModeList()\r\n});\r\n\r\nconst openFileSelector = () => {\r\n  fileInput.value.click()\r\n}\r\n\r\nconst uploadImage = async (event) => {\r\n  showSpinner.value = true\r\n  notAllowed.value = true\r\n  const file = event.target.files[0]\r\n  if (file) {\r\n    fileUpload.value = file\r\n    if (file.name.toLowerCase().includes(\"tiff\") || file.name.toLowerCase().includes(\"tif\")) {\r\n      const formData = new FormData()\r\n      formData.append('tiff_file', file)\r\n\r\n      try {\r\n        const response = await axios.post('http://localhost:5000/api/v1.0/convert', formData, {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n          },\r\n          responseType: 'arraybuffer'\r\n        })\r\n\r\n        const blob = new Blob([response.data], {type: 'image/png'})\r\n        model.image = URL.createObjectURL(blob)\r\n      } catch (error) {\r\n        alert('Error uploading and converting the image, please try again')\r\n        console.error('Error uploading and converting the image', error)\r\n      }\r\n    } else {\r\n      const reader = new FileReader()\r\n      reader.readAsDataURL(file)\r\n      reader.onload = () => {\r\n        model.image = reader.result\r\n      }\r\n    }\r\n  }\r\n  showSpinner.value = false\r\n  notAllowed.value = false\r\n}\r\n\r\nconst handleSegmentation = async () => {\r\n  if (fileUpload.value != null && !notAllowed.value) {\r\n    const formData = new FormData()\r\n    formData.append('image', fileUpload.value)\r\n    formData.append('modelName', model.type)\r\n    formData.append('colorMap', model.colorMap)\r\n    if (model.colorMap === 'random_label_cmap') {\r\n      model.strokeLine = '#FF0000'\r\n    } else {\r\n      model.strokeLine = '#000000'\r\n    }\r\n    showSpinner.value = true\r\n    notAllowed.value = true\r\n    try {\r\n      const startTime = performance.now()\r\n      const response = await axios.post('http://localhost:5000/api/v1.0/segmentation', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        },\r\n      })\r\n\r\n      model.imageRes = 'data:image/png;base64,' + response.data.imageBytes\r\n      model.objectsCount = response.data.objectsCount\r\n      model.points = response.data.points\r\n      model.coord = response.data.coord\r\n      model.duration = (performance.now() - startTime).toFixed(2)\r\n\r\n      isSegment.value = true\r\n    } catch (error) {\r\n      alert('An error occur when segmenting the image, please try again!')\r\n      console.error('Error uploading and converting the image', error)\r\n    } finally {\r\n      showSpinner.value = false\r\n      notAllowed.value = false\r\n    }\r\n  }\r\n}\r\n\r\nconst downloadImage = () => {\r\n  const link = document.createElement('a')\r\n  link.href = model.imageRes\r\n  link.download = 'mask.png'\r\n  link.click()\r\n}\r\n\r\nconst resetImage = () => {\r\n  model.image = null\r\n  model.imageRes = null\r\n}\r\n\r\nconst getModeList = async () => {\r\n  models.value = []; // Clear models before fetching\r\n  const url = 'http://localhost:5000/api/v1.0/models';\r\n\r\n  try {\r\n    const response = await axios.get(url, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Kiểm tra nếu response.data tồn tại và không rỗng\r\n    if (response.data && Array.isArray(response.data)) {\r\n      const modelList = response.data;\r\n      for (let i = 0; i < modelList.length; i++) {\r\n        models.value.push({ model_name: modelList[i], creation_time: '2024-06-17 15:03:15' });\r\n      }\r\n\r\n      // set default model selected\r\n      if (models.value && models.value.length > 0) {\r\n        model.type = models.value[0].model_name;\r\n      }\r\n    } else {\r\n      console.error('Invalid response data structure');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching model list:', error);\r\n    alert('Error fetching model list. Please try again.');\r\n  }\r\n};\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n/* Styles remain mostly the same as the original code */\r\n.popup {\r\n  display: block; /* Đảm bảo popup luôn có thể hiển thị khi cần */\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 400px;\r\n  border: 1px solid #ccc;\r\n  background-color: white;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  z-index: 1000;\r\n}\r\n\r\n.popup-header {\r\n  font-size: 20px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.overlay {\r\n  display: block; /* Đảm bảo overlay sẽ hiển thị khi popup mở */\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  z-index: 999;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  margin-top: 10px;\r\n}\r\n\r\nselect, input[type=\"range\"] {\r\n  width: 100%;\r\n  margin-top: 5px;\r\n}\r\n\r\n.range-value {\r\n  text-align: right;\r\n  font-size: 12px;\r\n  color: #555;\r\n}\r\n\r\n.popup-buttons {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.popup-buttons button {\r\n  margin-left: 10px;\r\n  padding: 5px 10px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.btn-open {\r\n  padding: 10px 20px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  background-color: #007BFF;\r\n  color: white;\r\n  cursor: pointer;\r\n}\r\n\r\n.btn-close {\r\n  background-color: #f44336;\r\n  color: white;\r\n}\r\n\r\n.btn-apply {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n}\r\n\r\n/* end */\r\n.upload-box {\r\n  margin-top: 50px;\r\n  width: 400px;\r\n  height: 150px;\r\n  color: #fff;\r\n  border: 5px dashed lightgreen;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #282828;\r\n  cursor: pointer;\r\n}\r\n\r\n.upload__message {\r\n  font-size: 20px;\r\n}\r\n\r\n.tool span {\r\n  color: lightgreen;\r\n  text-decoration: underline;\r\n  cursor: pointer;\r\n}\r\n\r\n.sample span {\r\n  font-size: 20px;\r\n  font-weight: 500;\r\n  color: lightgreen;\r\n  font-style: italic;\r\n}\r\n\r\n.caution {\r\n  position: absolute;\r\n  top: 450px;\r\n  color: #fff;\r\n  font-size: 16px;\r\n}\r\n</style>\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsLA,SAAQA,GAAG,EAAEC,QAAQ,EAAEC,SAAS,QAAO,KAAK;AAC5C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,6BAA6B;AACpD,OAAOC,cAAc,MAAM,iCAAiC;AAC5D,OAAOC,SAAS,MAAM,4BAA4B;AAClD,OAAOC,QAAQ,MAAM,2BAA2B;AAChD,OAAOC,YAAY,MAAM,+BAA+B;AAlCxD,MAAAC,WAAA,GAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,cAAc,EAAE,KAAK;MACrBC,cAAc,EAAE,IAAI;MACpBC,aAAa,EAAE,CAAC;MAChBC,cAAc,EAAE,IAAI;MACpBC,oBAAoB,EAAE,GAAG;MACzBC,gBAAgB,EAAE,GAAG;MACrBC,UAAU,EAAE,MAAM;MAAE;MACpBC,KAAK,EAAE,WAAW,CAAE;IACtB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,WAAWA,CAAA,EAAG;MACZ,IAAI,CAACT,cAAc,GAAG,CAAC,IAAI,CAACA,cAAc;IAC5C,CAAC;IACDU,aAAaA,CAAA,EAAG;MACd;MACA,IAAI,CAACD,WAAW,CAAC,CAAC;IACpB;EACF;AACF,CAAC;;;;IAcD,MAAME,WAAW,GAAGtB,GAAG,CAAC,KAAK,CAAC;IAC9B,MAAMuB,UAAU,GAAGvB,GAAG,CAAC,KAAK,CAAC;IAC7B,MAAMwB,UAAU,GAAGxB,GAAG,CAAC,IAAI,CAAC;IAC5B,MAAMyB,MAAM,GAAGzB,GAAG,CAAC,CAAC;IACpB,MAAM0B,SAAS,GAAG1B,GAAG,CAAC,IAAI,CAAC;IAC3B,MAAM2B,SAAS,GAAG3B,GAAG,CAAC,KAAK,CAAC;IAE5B,MAAMkB,KAAK,GAAGjB,QAAQ,CAAC;MACrB2B,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAE,QAAQ;MAClBC,KAAK,EAAE,IAAI;MACXC,QAAQ,EAAE,IAAI;MACdC,QAAQ,EAAE,CAAC;MACXC,YAAY,EAAE,CAAC;MACfC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE,EAAE;MACTC,UAAU,EAAE;IACd,CAAC,CAAC;IAEFlC,SAAS,CAAC,MAAM;MACdmC,WAAW,CAAC,CAAC;IACf,CAAC,CAAC;IAEF,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;MAC7BZ,SAAS,CAACa,KAAK,CAACC,KAAK,CAAC,CAAC;IACzB,CAAC;IAED,MAAMC,WAAW,GAAG,MAAOC,KAAK,IAAK;MACnCpB,WAAW,CAACiB,KAAK,GAAG,IAAI;MACxBhB,UAAU,CAACgB,KAAK,GAAG,IAAI;MACvB,MAAMI,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClC,IAAIF,IAAI,EAAE;QACRnB,UAAU,CAACe,KAAK,GAAGI,IAAI;QACvB,IAAIA,IAAI,CAACG,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC,IAAIL,IAAI,CAACG,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;UACvF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;UAC/BD,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAER,IAAI,CAAC;UAElC,IAAI;YACF,MAAMS,QAAQ,GAAG,MAAMjD,KAAK,CAACkD,IAAI,CAAC,wCAAwC,EAAEJ,QAAQ,EAAE;cACpFK,OAAO,EAAE;gBACP,cAAc,EAAE;cAClB,CAAC;cACDC,YAAY,EAAE;YAChB,CAAC,CAAC;YAEF,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACL,QAAQ,CAAC1C,IAAI,CAAC,EAAE;cAACkB,IAAI,EAAE;YAAW,CAAC,CAAC;YAC3DV,KAAK,CAACY,KAAK,GAAG4B,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;UACzC,CAAC,CAAC,OAAOI,KAAK,EAAE;YACdC,KAAK,CAAC,4DAA4D,CAAC;YACnEC,OAAO,CAACF,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;UAClE;QACF,CAAC,MAAM;UACL,MAAMG,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;UAC/BD,MAAM,CAACE,aAAa,CAACtB,IAAI,CAAC;UAC1BoB,MAAM,CAACG,MAAM,GAAG,MAAM;YACpBhD,KAAK,CAACY,KAAK,GAAGiC,MAAM,CAACI,MAAM;UAC7B,CAAC;QACH;MACF;MACA7C,WAAW,CAACiB,KAAK,GAAG,KAAK;MACzBhB,UAAU,CAACgB,KAAK,GAAG,KAAK;IAC1B,CAAC;IAED,MAAM6B,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI5C,UAAU,CAACe,KAAK,IAAI,IAAI,IAAI,CAAChB,UAAU,CAACgB,KAAK,EAAE;QACjD,MAAMU,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;QAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE3B,UAAU,CAACe,KAAK,CAAC;QAC1CU,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEjC,KAAK,CAACU,IAAI,CAAC;QACxCqB,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEjC,KAAK,CAACW,QAAQ,CAAC;QAC3C,IAAIX,KAAK,CAACW,QAAQ,KAAK,mBAAmB,EAAE;UAC1CX,KAAK,CAACkB,UAAU,GAAG,SAAS;QAC9B,CAAC,MAAM;UACLlB,KAAK,CAACkB,UAAU,GAAG,SAAS;QAC9B;QACAd,WAAW,CAACiB,KAAK,GAAG,IAAI;QACxBhB,UAAU,CAACgB,KAAK,GAAG,IAAI;QACvB,IAAI;UACF,MAAM8B,SAAS,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC;UACnC,MAAMnB,QAAQ,GAAG,MAAMjD,KAAK,CAACkD,IAAI,CAAC,6CAA6C,EAAEJ,QAAQ,EAAE;YACzFK,OAAO,EAAE;cACP,cAAc,EAAE;YAClB;UACF,CAAC,CAAC;UAEFpC,KAAK,CAACa,QAAQ,GAAG,wBAAwB,GAAGqB,QAAQ,CAAC1C,IAAI,CAAC8D,UAAU;UACpEtD,KAAK,CAACe,YAAY,GAAGmB,QAAQ,CAAC1C,IAAI,CAACuB,YAAY;UAC/Cf,KAAK,CAACgB,MAAM,GAAGkB,QAAQ,CAAC1C,IAAI,CAACwB,MAAM;UACnChB,KAAK,CAACiB,KAAK,GAAGiB,QAAQ,CAAC1C,IAAI,CAACyB,KAAK;UACjCjB,KAAK,CAACc,QAAQ,GAAG,CAACsC,WAAW,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS,EAAEI,OAAO,CAAC,CAAC,CAAC;UAE3D9C,SAAS,CAACY,KAAK,GAAG,IAAI;QACxB,CAAC,CAAC,OAAOqB,KAAK,EAAE;UACdC,KAAK,CAAC,6DAA6D,CAAC;UACpEC,OAAO,CAACF,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;QAClE,CAAC,SAAS;UACRtC,WAAW,CAACiB,KAAK,GAAG,KAAK;UACzBhB,UAAU,CAACgB,KAAK,GAAG,KAAK;QAC1B;MACF;IACF,CAAC;IAED,MAAMmC,aAAa,GAAGA,CAAA,KAAM;MAC1B,MAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACxCF,IAAI,CAACG,IAAI,GAAG5D,KAAK,CAACa,QAAQ;MAC1B4C,IAAI,CAACI,QAAQ,GAAG,UAAU;MAC1BJ,IAAI,CAACnC,KAAK,CAAC,CAAC;IACd,CAAC;IAED,MAAMwC,UAAU,GAAGA,CAAA,KAAM;MACvB9D,KAAK,CAACY,KAAK,GAAG,IAAI;MAClBZ,KAAK,CAACa,QAAQ,GAAG,IAAI;IACvB,CAAC;IAED,MAAMM,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9BZ,MAAM,CAACc,KAAK,GAAG,EAAE,CAAC,CAAC;MACnB,MAAM0C,GAAG,GAAG,uCAAuC;MAEnD,IAAI;QACF,MAAM7B,QAAQ,GAAG,MAAMjD,KAAK,CAAC+E,GAAG,CAACD,GAAG,EAAE;UACpC3B,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;;QAEF;QACA,IAAIF,QAAQ,CAAC1C,IAAI,IAAIyE,KAAK,CAACC,OAAO,CAAChC,QAAQ,CAAC1C,IAAI,CAAC,EAAE;UACjD,MAAM2E,SAAS,GAAGjC,QAAQ,CAAC1C,IAAI;UAC/B,KAAK,IAAI4E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,SAAS,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;YACzC7D,MAAM,CAACc,KAAK,CAACiD,IAAI,CAAC;cAAEC,UAAU,EAAEJ,SAAS,CAACC,CAAC,CAAC;cAAEI,aAAa,EAAE;YAAsB,CAAC,CAAC;UACvF;;UAEA;UACA,IAAIjE,MAAM,CAACc,KAAK,IAAId,MAAM,CAACc,KAAK,CAACgD,MAAM,GAAG,CAAC,EAAE;YAC3CrE,KAAK,CAACU,IAAI,GAAGH,MAAM,CAACc,KAAK,CAAC,CAAC,CAAC,CAACkD,UAAU;UACzC;QACF,CAAC,MAAM;UACL3B,OAAO,CAACF,KAAK,CAAC,iCAAiC,CAAC;QAClD;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdE,OAAO,CAACF,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDC,KAAK,CAAC,8CAA8C,CAAC;MACvD;IACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}